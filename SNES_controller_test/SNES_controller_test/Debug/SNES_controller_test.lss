
SNES_controller_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ab  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e1  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	24 d0       	rcall	.+72     	; 0xe2 <main>
  9a:	6c c0       	rjmp	.+216    	; 0x174 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <SNES_init>:
#define OUTPUT_PORT PORTB
//#define OUTPUT_PORT PORTC
//SNES 13-16 not used, so bits 0-3 not used.

void SNES_init(){
    SNES_PORT |= (0x01 << SNES_CLOCK);
  9e:	10 9a       	sbi	0x02, 0	; 2
    SNES_PORT |= (0x01 << SNES_LATCH);
  a0:	11 9a       	sbi	0x02, 1	; 2
  a2:	08 95       	ret

000000a4 <SNES_Read>:
        Every 16.67ms (or about 60Hz), the SNES CPU sends out a 12us wide, positive
        going data latch pulse on pin 3. This instructs the ICs in the controller
        to latch the state of all buttons internally.  
    */
	//SNES_PORT &= ~(0x01 << SNES_LATCH);
    SNES_PORT |= (0x01  << SNES_LATCH);
  a4:	11 9a       	sbi	0x02, 1	; 2
	SNES_PORT |= (0x01 << SNES_CLOCK);
  a6:	10 9a       	sbi	0x02, 0	; 2
    SNES_PORT &= ~(0x01 << SNES_LATCH);
  a8:	11 98       	cbi	0x02, 1	; 2
        multiple buttons may be depressed at any given moment. Also note
        that a logic "high" on the serial data line means the button is NOT
        depressed.
    */
    
    snes_pressed = (((~SNES_PIN) & (0x01 << SNES_DATA)) >> SNES_DATA);
  aa:	20 b1       	in	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	20 95       	com	r18
  b0:	30 95       	com	r19
  b2:	22 fb       	bst	r18, 2
  b4:	88 27       	eor	r24, r24
  b6:	80 f9       	bld	r24, 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	40 e1       	ldi	r20, 0x10	; 16
  bc:	50 e0       	ldi	r21, 0x00	; 0
    
    // For 16 clock cycles the controller outputs the keys pressed, 
	// but first one is a bit different and some not used.
	// See JChristy Part 6. 
    for(int i = 0; i < 16; i++){
        SNES_PORT &= ~(0x01 << SNES_CLOCK);
  be:	10 98       	cbi	0x02, 0	; 2
        snes_pressed <<= 1;
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
        snes_pressed |= ( ( (~SNES_PIN) & (0x01  << SNES_DATA) ) >> SNES_DATA);      
  c4:	20 b1       	in	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	20 95       	com	r18
  ca:	30 95       	com	r19
  cc:	22 fb       	bst	r18, 2
  ce:	66 27       	eor	r22, r22
  d0:	60 f9       	bld	r22, 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	86 2b       	or	r24, r22
  d6:	97 2b       	or	r25, r23
		SNES_PORT |= (0x01 << SNES_CLOCK);
  d8:	10 9a       	sbi	0x02, 0	; 2
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	51 09       	sbc	r21, r1
    snes_pressed = (((~SNES_PIN) & (0x01 << SNES_DATA)) >> SNES_DATA);
    
    // For 16 clock cycles the controller outputs the keys pressed, 
	// but first one is a bit different and some not used.
	// See JChristy Part 6. 
    for(int i = 0; i < 16; i++){
  de:	79 f7       	brne	.-34     	; 0xbe <SNES_Read+0x1a>
        snes_pressed <<= 1;
        snes_pressed |= ( ( (~SNES_PIN) & (0x01  << SNES_DATA) ) >> SNES_DATA);      
		SNES_PORT |= (0x01 << SNES_CLOCK);
    }
    return snes_pressed;
}
  e0:	08 95       	ret

000000e2 <main>:



int main(void)
{
    DDRA = 0x03; PORTA = 0x00; //input
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	81 b9       	out	0x01, r24	; 1
  e6:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00; //output
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	15 b8       	out	0x05, r1	; 5
	
	unsigned short button = 0x0000;
	unsigned char out;

	
	SNES_init();
  ee:	d7 df       	rcall	.-82     	; 0x9e <SNES_init>
		button = (SNES_Read());
		
		// if(!button){
			if((button & 0) == 0) out = 0x00;
			 if((button & 16) == 16) out = 0x01; //"R";
			 if((button & 32) == 32) out = 0x02; //"L";
  f0:	68 94       	set
  f2:	aa 24       	eor	r10, r10
  f4:	a1 f8       	bld	r10, 1
			 if((button & 64) == 64) out = 0x03; //"X";
  f6:	0f 2e       	mov	r0, r31
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	bf 2e       	mov	r11, r31
  fc:	f0 2d       	mov	r31, r0
			 if((button & 128) == 128) out = 0x04; //"A";
  fe:	68 94       	set
 100:	cc 24       	eor	r12, r12
 102:	c2 f8       	bld	r12, 2
			 if((button & 256) == 256) out = 0x05; //"Right";
 104:	0f 2e       	mov	r0, r31
 106:	f5 e0       	ldi	r31, 0x05	; 5
 108:	df 2e       	mov	r13, r31
 10a:	f0 2d       	mov	r31, r0
			 if((button & 512) == 512) out = 0x06; //"Left";
 10c:	0f 2e       	mov	r0, r31
 10e:	f6 e0       	ldi	r31, 0x06	; 6
 110:	ef 2e       	mov	r14, r31
 112:	f0 2d       	mov	r31, r0
			 if((button & 1024) == 1024) out = 0x07; //"Up";
 114:	0f 2e       	mov	r0, r31
 116:	f7 e0       	ldi	r31, 0x07	; 7
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
			 if((button & 2048) == 2048) out = 0x08; //"Down";
 11c:	08 e0       	ldi	r16, 0x08	; 8
			 if((button & 4096) == 4096) out = 0x09; //"Start";
 11e:	19 e0       	ldi	r17, 0x09	; 9
			 if((button & 8192) == 8192) out = 0x0A; //"Select";
 120:	da e0       	ldi	r29, 0x0A	; 10
			 if((button & 16384) == 16384) out = 0x0B; //"Y";
 122:	cb e0       	ldi	r28, 0x0B	; 11
			 if((button & 32768) == 32768) out = 0x0C; //"B";
 124:	0f 2e       	mov	r0, r31
 126:	fc e0       	ldi	r31, 0x0C	; 12
 128:	9f 2e       	mov	r9, r31
	SNES_init();
	
	
    while (1) {
		out = 0x00;
		button = (SNES_Read());
 12a:	f0 2d       	mov	r31, r0
 12c:	bb df       	rcall	.-138    	; 0xa4 <SNES_Read>
		
		// if(!button){
			if((button & 0) == 0) out = 0x00;
			 if((button & 16) == 16) out = 0x01; //"R";
			 if((button & 32) == 32) out = 0x02; //"L";
 12e:	85 fd       	sbrc	r24, 5
 130:	09 c0       	rjmp	.+18     	; 0x144 <main+0x62>
    while (1) {
		out = 0x00;
		button = (SNES_Read());
		
		// if(!button){
			if((button & 0) == 0) out = 0x00;
 132:	9c 01       	movw	r18, r24
 134:	32 95       	swap	r19
 136:	22 95       	swap	r18
 138:	2f 70       	andi	r18, 0x0F	; 15
 13a:	23 27       	eor	r18, r19
 13c:	3f 70       	andi	r19, 0x0F	; 15
 13e:	23 27       	eor	r18, r19
 140:	21 70       	andi	r18, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <main+0x64>
			 if((button & 16) == 16) out = 0x01; //"R";
			 if((button & 32) == 32) out = 0x02; //"L";
 144:	2a 2d       	mov	r18, r10
			 if((button & 64) == 64) out = 0x03; //"X";
 146:	86 fd       	sbrc	r24, 6
 148:	2b 2d       	mov	r18, r11
			 if((button & 128) == 128) out = 0x04; //"A";
 14a:	87 fd       	sbrc	r24, 7
 14c:	2c 2d       	mov	r18, r12
			 if((button & 256) == 256) out = 0x05; //"Right";
 14e:	90 fd       	sbrc	r25, 0
 150:	2d 2d       	mov	r18, r13
			 if((button & 512) == 512) out = 0x06; //"Left";
 152:	91 fd       	sbrc	r25, 1
 154:	2e 2d       	mov	r18, r14
			 if((button & 1024) == 1024) out = 0x07; //"Up";
 156:	92 fd       	sbrc	r25, 2
 158:	2f 2d       	mov	r18, r15
			 if((button & 2048) == 2048) out = 0x08; //"Down";
 15a:	93 fd       	sbrc	r25, 3
 15c:	20 2f       	mov	r18, r16
			 if((button & 4096) == 4096) out = 0x09; //"Start";
 15e:	94 fd       	sbrc	r25, 4
 160:	21 2f       	mov	r18, r17
			 if((button & 8192) == 8192) out = 0x0A; //"Select";
 162:	95 fd       	sbrc	r25, 5
 164:	2d 2f       	mov	r18, r29
			 if((button & 16384) == 16384) out = 0x0B; //"Y";
 166:	96 fd       	sbrc	r25, 6
 168:	2c 2f       	mov	r18, r28
			 if((button & 32768) == 32768) out = 0x0C; //"B";
 16a:	99 23       	and	r25, r25
 16c:	0c f4       	brge	.+2      	; 0x170 <main+0x8e>
 16e:	29 2d       	mov	r18, r9
		 //}
		 //else out = 0xFF; //"None";
		 PORTB = out;
 170:	25 b9       	out	0x05, r18	; 5
		
    }
 172:	dc cf       	rjmp	.-72     	; 0x12c <main+0x4a>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
